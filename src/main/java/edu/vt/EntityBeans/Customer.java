/*
 * Created by Yongjae Lim on 2022.4.23
 * Copyright Â© 2022 Yongjae Lim. All rights reserved.
 */
package edu.vt.EntityBeans;

import java.io.Serializable;
import java.util.Date;
import javax.persistence.*;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

/*
The @Entity annotation designates this class as a JPA Entity POJO class
representing the Customer table in the SurrogateDrivingDB database.
 */
@Entity

// Name of the database table represented
@Table(name = "Customer")

@NamedQueries({
        @NamedQuery(name = "Customer.findAll", query = "SELECT u FROM Customer u")
        , @NamedQuery(name = "Customer.findById", query = "SELECT u FROM Customer u WHERE u.customer_id = :costomer_id")
        , @NamedQuery(name = "Customer.findBySSN", query = "SELECT u FROM Customer u WHERE u.ssn = :SSN")
        , @NamedQuery(name = "Customer.findByPassword", query = "SELECT u FROM Customer u WHERE u.password = :password")
        , @NamedQuery(name = "Customer.findByFirstName", query = "SELECT u FROM Customer u WHERE u.firstName = :firstName")
        , @NamedQuery(name = "Customer.findByMiddleName", query = "SELECT u FROM Customer u WHERE u.middleName = :middleName")
        , @NamedQuery(name = "Customer.findByLastName", query = "SELECT u FROM Customer u WHERE u.lastName = :lastName")
        , @NamedQuery(name = "Customer.findByAddress1", query = "SELECT u FROM Customer u WHERE u.address1 = :address1")
        , @NamedQuery(name = "Customer.findByAddress2", query = "SELECT u FROM Customer u WHERE u.address2 = :address2")
        , @NamedQuery(name = "Customer.findByCity", query = "SELECT u FROM Customer u WHERE u.city = :city")
        , @NamedQuery(name = "Customer.findByState", query = "SELECT u FROM Customer u WHERE u.state = :state")
        , @NamedQuery(name = "Customer.findByZipcode", query = "SELECT u FROM Customer u WHERE u.zipcode = :zipcode")
        , @NamedQuery(name = "Customer.findBySecurityQuestionNumber", query = "SELECT u FROM Customer u WHERE u.securityQuestionNumber = :securityQuestionNumber")
        , @NamedQuery(name = "Customer.findBySecurityAnswer", query = "SELECT u FROM Customer u WHERE u.securityAnswer = :securityAnswer")
        , @NamedQuery(name = "Customer.findByEmail", query = "SELECT u FROM Customer u WHERE u.email = :email")})

public class Customer implements Serializable {
    /*
    ========================================================
    Instance variables representing the attributes (columns)
    of the Customer table in the SurrogateDrivingDB database.

    CREATE TABLE Customer
    (
        customer_id INT PRIMARY KEY AUTO_INCREMENT,
        ssn INT NOT NULL,
        name VARCHAR(100) NOT NULL,
        Date_Of_Birth DATE NOT NULL,
        phone_number VARCHAR(32) NOT NULL
    );
    ========================================================
     */
    private static final long serialVersionUID = 1L;
    /*
    Primary Key id is auto generated by the system as an Integer value
    starting with 1 and incremented by 1, i.e., 1,2,3,...
    A deleted entity object's primary key number is not reused.
     */
    // id INT UNSIGNED NOT NULL AUTO_INCREMENT
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Basic(optional = false)
    @Column(name = "customer_id")
    private Integer customer_id;

    // SSN INT NOT NULL,
    @Basic(optional = false)
    @NotNull
    //@Size(min = 1, max = 32)
    @Column(name = "SSN")
    private Integer SSN;

    // To store Salted and Hashed Password Parts
    // password VARCHAR(256) NOT NULL
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 256)
    @Column(name = "password")
    private String password;

    // name VARCHAR(100) NOT NULL
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 32)
    @Column(name = "name")
    private String name;

    // middle_name VARCHAR(32)
    // birthdate DATE NOT NULL
    // birthdate is recorded in the database as YYYY-MM-DD so that it is sortable
    @Basic(optional = false)
    @NotNull
    @Column(name = "birthdate")
    @Temporal(TemporalType.DATE)
    private Date birthdate;

    // last_name VARCHAR(32) NOT NULL
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 32)
    @Column(name = "last_name")
    private String lastName;

    // address1 VARCHAR(128) NOT NULL
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 128)
    @Column(name = "address1")
    private String address1;

    // address2 VARCHAR(128)
    @Size(max = 128)
    @Column(name = "address2")
    private String address2;

    // city VARCHAR(64) NOT NULL
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 64)
    @Column(name = "city")
    private String city;

    // state VARCHAR(2) NOT NULL
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 2)
    @Column(name = "state")
    private String state;

    // zipcode VARCHAR(10) NOT NULL
    // e.g., 24060-1804
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 10)
    @Column(name = "zipcode")
    private String zipcode;

    // security_question_number INT NOT NULL
    // Refers to the number of the selected security question
    @Basic(optional = false)
    @NotNull
    @Column(name = "security_question_number")
    private int securityQuestionNumber;

    // security_answer VARCHAR(128) NOT NULL
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 128)
    @Column(name = "security_answer")
    private String securityAnswer;

    // email VARCHAR(128) NOT NULL
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 128)
    @Column(name = "email")
    private String email;

    /*
    ===============================================================
    Class constructors for instantiating a Customer entity object to
    represent a row in the Customer table in the SurrogateDrivingDB database.
    ===============================================================
     */

    // Used in createAccount method in CustomerController
    public Customer() {
    }

    // Not used but kept for potential future use
    public Customer(Integer id) {
        this.id = id;
    }

    // Not used but kept for potential future use
    public Customer(Integer id, String customername, String password, String firstName, String middleName,
                String lastName, String address1, String address2, String city, String state,
                String zipcode, int securityQuestionNumber, String securityAnswer, String email) {
        this.id = id;
        this.customername = customername;
        this.password = password;
        this.firstName = firstName;
        this.middleName = middleName;
        this.lastName = lastName;
        this.address1 = address1;
        this.address2 = address2;
        this.city = city;
        this.state = state;
        this.zipcode = zipcode;
        this.securityQuestionNumber = securityQuestionNumber;
        this.securityAnswer = securityAnswer;
        this.email = email;
    }

    /*
    ======================================================
    Getter and Setter methods for the attributes (columns)
    of the Customer table in the SurrogateDrivingDB database.
    ======================================================
     */
    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getCustomername() {
        return customername;
    }

    public void setCustomername(String customername) {
        this.customername = customername;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getMiddleName() {
        return middleName;
    }

    public void setMiddleName(String middleName) {
        this.middleName = middleName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public String getAddress1() {
        return address1;
    }

    public void setAddress1(String address1) {
        this.address1 = address1;
    }

    public String getAddress2() {
        return address2;
    }

    public void setAddress2(String address2) {
        this.address2 = address2;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public String getState() {
        return state;
    }

    public void setState(String state) {
        this.state = state;
    }

    public String getZipcode() {
        return zipcode;
    }

    public void setZipcode(String zipcode) {
        this.zipcode = zipcode;
    }

    public int getSecurityQuestionNumber() {
        return securityQuestionNumber;
    }

    public void setSecurityQuestionNumber(int securityQuestionNumber) {
        this.securityQuestionNumber = securityQuestionNumber;
    }

    public String getSecurityAnswer() {
        return securityAnswer;
    }

    public void setSecurityAnswer(String securityAnswer) {
        this.securityAnswer = securityAnswer;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    /*
    ================================
    Instance Methods Used Internally
    ================================
     */

    // Generate and return a hash code value for the object with database primary key id
    @Override
    public int hashCode() {
        int hash = 0;
        hash += (id != null ? id.hashCode() : 0);
        return hash;
    }

    /*
     Checks if the Customer object identified by 'object' is the same as the Customer object identified by 'id'
     Parameter object = Customer object identified by 'object'
     Returns True if the Customer 'object' and 'id' are the same; otherwise, return False
     */
    @Override
    public boolean equals(Object object) {
        if (!(object instanceof Customer)) {
            return false;
        }
        Customer other = (Customer) object;
        return (this.id != null || other.id == null) && (this.id == null || this.id.equals(other.id));
    }

    // Return String representation of database primary key id
    @Override
    public String toString() {
        return id.toString();
    }

}
